function otherwkdir = mkconfig_genotyper(varargin)
% MKCONFIG_GENOTYPER    Genotype Data with GATK
%   mkconfig_genotyper(varargin) will genotype the incoming bam(s) using
%   either single sample or multiple sample variant calling model. Single
%   sample variant calling will not run with multiple sample option. If
%   there is a cohort of samples that need to be individually genotyped
%   then run each file separately with mkconfig_genotyper(varargin).
%   Optionally, the output directory can be returned at the matlab command
%   line for down-stream processing. 
%   Inputs: 
%       '-reference': The genome reference assembly
%       '-out': The output directory
%       '-gatk_path': The absolute path to gatk
%       '-t': The number of cores to use, default=4
%       '-bam': The sample bam file. If multiple sample variant calling is
%       requrested then bam=/path/to/bams where ls /path/to/bams/*bam would
%       return all bam files to be processed as a cohort
%       '-multisample': Option for specifying multisample variant model,
%       default=false. 
%       '-java_path': The absolute path to java, default assumes symbolic
%       link
%       '-mbq': The minimum base quality for calling a base mismatch
%       reference, default=17
%       '-mmq': The minimum read mapping quality to consider a read for
%       calling. Only used in indel calling, default=20
%       '-stand_emit_conf': The minimum phred-scaled Qscore threshold to
%       emit low confidence calls. The vcf file will mark these records as
%       LowQual. Default=30
%       '-stand_call_conf': The minimum pred-scaled Qscore threshold to
%       separate high confidence from low confidence calls, default=50
%       '-variant': Specifies which class of variants to call, i.e. snps,
%       indels, or both. Default=SNP, for indels use INDEL, both snps and
%       indels can be returned by simply specifying 'both'. 
%       '-all_sites': Specifies whether or not to call confidence reference
%       bases, deafult=false. 
%       '-dbsnp': The dbsnp vcf file. dbsnp rs# will be written to the vcf
%       record,
%       default='/illumina/applications/annovar/humandb/hg19_snp132.vcf'
%       '-KG': The 1000 Genomes project vcf file. If a record is in the
%       1KG data then 1KG will be written, as well as the frequency of the
%       given variant. 
%       defult='/illumina/applications/annovar/humandb/ALL.2of4intersection.20100804.sites.ucsc.vcf
%       '-exome_capture': default=true
%       '-whole_genome': default=false
%   Outputs: 
%       This tool will outputted a directory tree, {'sh','logs','vcf'}. The
%       shell scripts for running the analysis are partitioned by
%       chromosome in ~/sh/. The vcf records will be written to ~/vcf/ and
%       partitioned by chromosome. 
%   NOTE: 
%       Absolute paths are not necessary if a symbolic link is created for
%       the respective binary. If running within another script, the
%       working directory will be returned. 
% 
% Author: Brian Geier, BGC June 2011


toolName = mfilename ; 
pnames = {'-gatk_path','-bam','-multisample','-reference','-out','-java_path',...
    '-mbq','-mmq','-stand_emit_conf','-stand_call_conf','-variant',...
    '-all_sites','-dbsnp','-t','-KG','-exome_capture','-whole_genome'};
dflts = {'/illumina/applications/gatk/dist','',false,'',pwd,...
    '',17,20,30.0,50.0,'SNP',false,...
    '/illumina/applications/annovar/humandb/hg19_snp132.vcf',4,...
    '/illumina/applications/annovar/humandb/ALL.2of4intersection.20100804.sites.ucsc.vcf',...
    true,false}; 

arg = getargs2(pnames,dflts,varargin{:});
print_tool_params2(toolName,1,arg); 

otherwkdir = mkworkfolder(arg.out,toolName); 
fprintf('Saving analysis to %s\n',otherwkdir); 
fid = fopen(fullfile(otherwkdir,sprintf('%s_params.txt',toolName)),'wt'); 
print_tool_params2(toolName,fid,arg); 
fclose(fid); 

mkdir(otherwkdir,'sh');
mkdir(otherwkdir,'logs');
mkdir(otherwkdir,'vcf');

chrs = cell(1,24) ;
for i = 1 : 22
    chrs{i} = ['chr',num2str(i)]; 
end
chrs{end-1} = 'chrX'; chrs{end} = 'chrY'; 

header = {'#!/bin/sh',...
    '#$ -cwd',...
    '#$ -S /bin/sh',...
    '#$ -j y',...
    'set -x'};
switch arg.variant
    case 'SNP'
        appending = '.snps.vcf'; 
    case 'INDEL'
        appending = '.indels.vcf'; 
    case 'both'
        arg.variant = 'BOTH'; 
        appending = '.variants.vcf'; 
    otherwise
        error('check variant type')
end

if arg.all_sites
    arg.variant = [arg.variant,' -out_mode EMIT_ALL_CONFIDENT_SITES '];
end

% PER GATK best practice
if arg.exome_capture
    DATA_TYPE_SPECIFIC_FILTERS = ...
        '"QUAL < 30.0 || QD < 5.0 || HRun > 5 || SB > -0.10"';
elseif arg.whole_genome
    DATA_TYPE_SPECIFIC_FILTERS = ...
        '"DP > 100 || MQ0 > 40 || SB > -0.10"';
end

if arg.multisample
%     tmp = ''; 
    files = dir(fullfile(arg.bam,'*bam')); 
    tmp = fullfile(arg.bam,files(1).name); 
    for i = 2 : length(files)
        tmp = [tmp, ' -I ',fullfile(arg.bam,files(i).name),' ']; 
    end
    arg.bam = tmp ; 
    final_name = ['cohort_n',num2str(length(files))]; 
else

    final_name = pullname(arg.bam); 
end
fid_merge = fopen(fullfile(otherwkdir,'merge_vcf.sh'),'w'); 
fprintf(fid_merge,'%s',['time ',fullfile(arg.java_path,'java'),...
    ' -jar ',fullfile(arg.gatk_path,...
    'GenomeAnalysisTK.jar'),' -T CombineVariants -R ',arg.reference,...
    ' -o ',fullfile(otherwkdir,[final_name,'.vcf']),' ']); 
for i = 1 : length(chrs)
    fid = fopen(fullfile(otherwkdir,'sh',[chrs{i},'.genotyper']),'w'); 
    for j = 1 : length(header)
        fprintf(fid,'%s\n',header{j}); 
    end
    fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
        ' -jar ',fullfile(arg.gatk_path,...
        'GenomeAnalysisTK.jar'),' -T UnifiedGenotyper -A DepthOfCoverage ',...
        '-glm ',arg.variant,' -R ',...
        arg.reference,' -o ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending]),' -I ',arg.bam, ' -nt ',num2str(arg.t),' -L ',...
        chrs{i},' -mbq ',num2str(arg.mbq),' -mmq ',num2str(arg.mmq),...
        ' -stand_emit_conf ',num2str(arg.stand_emit_conf),...
        ' -stand_call_conf ',num2str(arg.stand_call_conf),...
        ' -B:dbsnp,VCF ',arg.dbsnp,' ;']) ; 
    fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
        ' -jar ',fullfile(arg.gatk_path,...
        'GenomeAnalysisTK.jar'),' -T VariantAnnotator ',...
        '-G RankSumTest -G StandardAnnotation -R ',...
        arg.reference,' -o ',fullfile(otherwkdir,'vcf',...
        [chrs{i},'tmp',appending]),' -I ',arg.bam,' -L ',...
        chrs{i},' -B:comp1KG,VCF ',arg.KG,' -E KG.AF -B:variant,VCF ',...
        fullfile(otherwkdir,'vcf',[chrs{i},appending]),...
        ' -B:KG,VCF ',arg.KG]); 
    fprintf(fid,'%s\n\n',['rm -f ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending]),' ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending,'.idx'])]); 
    fprintf(fid,'%s\n\n',['mv ',fullfile(otherwkdir,'vcf',...
        [chrs{i},'tmp',appending]),' ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending])]); 
    fprintf(fid,'%s\n\n',['mv ',fullfile(otherwkdir,'vcf',...
        [chrs{i},'tmp',appending,'.idx']),' ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending,'.idx'])]); 
    fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
        ' -jar ',fullfile(arg.gatk_path,...
        'GenomeAnalysisTK.jar'),' -T VariantFiltration ',...
        ' -R ',arg.reference,' -o ',fullfile(otherwkdir,'vcf',...
        [chrs{i},'tmp',appending]),' -B:variant,VCF ',...
        fullfile(otherwkdir,'vcf',[chrs{i},appending]),' ',...
        ' --filterExpression ',DATA_TYPE_SPECIFIC_FILTERS,...
        ' --filterName "GATKStandard"',...
        ' --filterExpression "MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)"',...
        ' --filterName "HARD_TO_VALIDATE"',...
        ' --filterExpression "SB >= -1.0"',...
        ' --filterName "StrandBiasFilter"',...
        ' --filterExpression "QUAL < 10"',...
        ' --filterName "QualFilter"',...
        ' --clusterWindowSize 10',...
        ' --filterExpression "DP < 10"',...
        ' --filterName "LowDepth" ']); 
    
    fprintf(fid,'%s\n\n',['rm -f ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending]),' ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending,'.idx'])]); 
    fprintf(fid,'%s\n\n',['mv ',fullfile(otherwkdir,'vcf',...
        [chrs{i},'tmp',appending]),' ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending])]); 
    fprintf(fid,'%s\n\n',['mv ',fullfile(otherwkdir,'vcf',...
        [chrs{i},'tmp',appending,'.idx']),' ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending,'.idx'])]); 

    fclose(fid); 
    system(['chmod 755 ',fullfile(otherwkdir,'sh',[chrs{i},'.genotyper'])]);
    fprintf(fid_merge,'%s',' -B:',chrs{i},',VCF ',fullfile(otherwkdir,'vcf',...
        [chrs{i},appending])); 
end
fprintf(fid_merge,'%s',' -genotypeMergeOptions PRIORITIZE'); 
fprintf(fid_merge,'%s',' -priority '); 
for i = 1 : length(chrs)-1
    fprintf(fid_merge,'%s,',chrs{i}); 
end
fprintf(fid_merge,'%s\n\n',chrs{end}); 
% Create a table of the final vcf file, excluding all known sites
% fprintf(fid_merge,'%s\n\n',['grep -v 1KG ',...
%     fullfile(otherwkdir,[final_name,'.vcf']),' | ',...
%     'awk ''{if($3==".") print $0}'' > ',...
%     fullfile(otherwkdir,[final_name,'.novels.tmp'])]); 
% fprintf(fid_merge,'%s\n\n',['cat <(grep ''#'' ',...
%     fullfile(otherwkdir,[final_name,'.vcf']),') <(cat ',...
%     fullfile(otherwkdir,[final_name,'.novels.tmp']),') > ',...
%     fullfile(otherwkdir,[final_name,'.novels.vcf'])]); 
% fprintf(fid_merge,'%s\n\n',['rm -f ',...
%     fullfile(otherwkdir,[final_name,'.novels.tmp'])]); 
fprintf(fid_merge,'%s\n\n',[fullfile(arg.java_path,'java'),...
    ' -jar ',fullfile(arg.gatk_path,...
    'GenomeAnalysisTK.jar'),' -T VariantsToTable -R ',arg.reference,...
    ' -o ',fullfile(otherwkdir,[final_name,'.table']),...
    ' -B:variant,VCF ',fullfile(otherwkdir,[final_name,'.vcf']),...
    ' -F CHROM -F POS -F REF -F ALT -F AF -F QUAL -F DP -F FILTER -F ID ',...
    '--showFiltered']); 

fclose(fid_merge); 
system(['chmod 755 ',fullfile(otherwkdir,'merge_vcf.sh')]); 
print_str('Lets genotype ! '); 

