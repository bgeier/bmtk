function mkconfig_realign(varargin)
% MKCONFIG_REALIGN      Make configuration files for running realignment
%   mkconfig_realign(varargin) will creat configuration files/directories
%   for making a realigned bam file, as well as pre and post genotype
%   calls. Before running the realignment scripts the pre genotype calls
%   must be created. These shell scripts can be found within
%   ~/pre_realignment_calls/sh/~. The local realigner will search for
%   output within ~/pre_realignment_calls/vcf/ at runtime. 
%   Inputs: 
%       '-reference': The genome reference assembly
%       '-out': The output directory
%       '-gatk_path': The absolute path to gatk
%       '-bam': The sample bam file. If multiple sample variant calling is
%       requrested then bam=/path/to/bams where ls /path/to/bams/*bam would
%       return all bam files to be processed as a cohort
%       '-multisample': Option for specifying multisample variant model,
%       default=false. 
%       '-java_path': The absolute path to java, default assumes symbolic
%       link
%       '-dbsnp': The dbsnp vcf file. dbsnp rs# will be written to the vcf
%       record,
%       default='/illumina/applications/annovar/humandb/hg19_snp132.vcf'


toolName = mfilename ; 
pnames = {'-reference','-out','-bam','-gatk_path','-intervals',...
    '-my_indels','-dbsnp','-samtools_path','-java_path','-picard_path',...
    '-multisample'};
dflts = {'',pwd,'','/illumina/applications/gatk/dist','',...
    'indels','/illumina/applications/annovar/humandb/hg19_snp132.vcf',...
    '/illumina/applications/samtools-0.1.15',...
    '','/illumina/applications/picard-tools-1.42',false}; 

arg = getargs2(pnames,dflts,varargin{:});
print_tool_params2(toolName,1,arg); 

otherwkdir = mkworkfolder(arg.out,toolName); 
fprintf('Saving analysis to %s\n',otherwkdir); 
fid = fopen(fullfile(otherwkdir,sprintf('%s_params.txt',toolName)),'wt'); 
print_tool_params2(toolName,fid,arg); 
fclose(fid); 

mkdir(otherwkdir,'post_realignment_calls'); 
mkdir(otherwkdir,'pre_realignment_calls'); 
header = {'#!/bin/sh',...
    '#$ -cwd',...
    '#$ -S /bin/sh',...
    '#$ -j y',...
    'set -x'};

snp_dir = mkconfig_genotyper('-gatk_path',arg.gatk_path,'-bam',arg.bam,...
    '-reference',arg.reference,...
    '-out',fullfile(otherwkdir,'pre_realignment_calls'),'-variant','SNP');
indel_dir = mkconfig_genotyper('-gatk_path',arg.gatk_path,'-bam',arg.bam,...
    '-reference',arg.reference,...
    '-out',fullfile(otherwkdir,'pre_realignment_calls'),'-variant','INDEL');

if arg.multisample
%     tmp = ''; 
    files = dir(fullfile(arg.bam,'*bam')); 
    tmp = fullfile(arg.bam,files(1).name); 
    for i = 2 : length(files)
        tmp = [tmp, ' -I ',fullfile(arg.bam,files(i).name),' ']; 
    end
    arg.bam = tmp ; 
end

%% Parallelization Option

chrs = cell(1,24) ;
for i = 1 : 22
    chrs{i} = ['chr',num2str(i)]; 
end
chrs{end-1} = 'chrX'; chrs{end} = 'chrY'; 

for i = 1 : length(chrs)
    fid = fopen(fullfile(otherwkdir,[chrs{i},'.realign.sh']),'w'); 
    for j = 1 : length(header)
        fprintf(fid,'%s\n',header{j});
    end
    
    mkdir(otherwkdir,[chrs{i},'.realign']); 
    fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
        ' -jar ',fullfile(arg.gatk_path,...
        'GenomeAnalysisTK.jar'),' -T RealignerTargetCreator -o ',...
        fullfile(otherwkdir,[chrs{i},'.realign'],[chrs{i},'.intervals']),...
        ' -R ',arg.reference,' -I ',arg.bam,...
        ' -B:indels,VCF ',fullfile(indel_dir,'vcf',[chrs{i},'.indels.vcf']),...
        ' -B:snps,VCF ',fullfile(snp_dir,'vcf',[chrs{i},'.snps.vcf']),...
        ' -B:dbsnp,VCF ',arg.dbsnp,' -L ',chrs{i}]) ; 
    
    fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
        ' -Xmx5g -Djava.io.tmpdir=',fullfile(otherwkdir,[chrs{i},'.realign'])...
        ,' -jar ',fullfile(arg.gatk_path,...
        'GenomeAnalysisTK.jar'),' -T IndelRealigner -targetIntervals ',...
        fullfile(otherwkdir,[chrs{i},'.realign'],[chrs{i},'.intervals']),...
        ' -R ',arg.reference,' -I ',arg.bam,' -o ',...
        fullfile(otherwkdir,[chrs{i},'.realign'],...
        [pullname(arg.bam),chrs{i},'.realigned.bam']),...
        ' -B:indels,VCF ',fullfile(indel_dir,'vcf',[chrs{i},'.indels.vcf']),...
        ' -B:dbsnp,VCF ',arg.dbsnp,' -L ',...
        chrs{i}]) ; 
    
    fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
        ' -jar ',fullfile(arg.gatk_path,...
        'GenomeAnalysisTK.jar'),' -l INFO -R ',arg.reference,' -B:mask,VCF ',...
        arg.dbsnp,' -I ',fullfile(otherwkdir,[chrs{i},'.realign'],...
        [pullname(arg.bam),chrs{i},'.realigned.bam']),...
        ' -T CountCovariates -dP illumina -cov ReadGroupCovariate -cov QualityScoreCovariate ',...
        '-cov CycleCovariate -cov DinucCovariate -recalFile ',...
        fullfile(otherwkdir,[chrs{i},'.realign'],'recal_data.csv')]);
    
    fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
        ' -jar ',fullfile(arg.gatk_path,...
        'GenomeAnalysisTK.jar'),' -l INFO -R ',arg.reference,' -B:mask,VCF ',...
        arg.dbsnp,' -I ',fullfile(otherwkdir,[chrs{i},'.realign'],...
        [pullname(arg.bam),chrs{i},'.realigned.bam']),...
        ' -T TableRecalibration -dP illumina -recalFile ',...
        fullfile(otherwkdir,[chrs{i},'.realign'],'recal_data.csv'),...
        ' -o ',fullfile(otherwkdir,[chrs{i},'.realign'],...
        [pullname(arg.bam),chrs{i},'.realign_recal.bam'])]);
    fprintf(fid,'%s\n\n',['rm -f ',fullfile(otherwkdir,[chrs{i},'.realign'],...
        [pullname(arg.bam),chrs{i},'.realigned.bam'])]); 
    fclose(fid); 
    system(['chmod 755 ',fullfile(otherwkdir,[chrs{i},'.realign.sh'])]); 
end

fid = fopen(fullfile(otherwkdir,'merge.realign.sh'),'w'); 
for i = 1 : length(header)
    fprintf(fid,'%s\n',header{i}); 
end
fprintf(fid,'%s',['time java -Xmx50g -jar ',...
    fullfile(arg.picard_path,'MergeSamFiles.jar ')]); 
for i = 1 : length(chrs)
    fprintf(fid,'%s',[' INPUT=',fullfile(otherwkdir,[chrs{i},'.realign'],...
        [pullname(arg.bam),chrs{i},'.realign_recal.bam'])]); 
end
fprintf(fid,'%s%s',' OUTPUT=',fullfile(arg.out,[pullname(arg.bam),'.realigned.bam']),...
    ' USE_THREADING=true COMMENT=GATKrealigned'); 
fprintf(fid,'\n'); 
fprintf(fid,'%s\n',['time ',fullfile(arg.samtools_path,'samtools'),' index ',...
    fullfile(arg.out,[pullname(arg.bam),'.realigned.bam'])]); 
fclose(fid); 

system(['chmod 755 ',fullfile(otherwkdir,'merge.realign.sh')]); 

mkconfig_genotyper('-gatk_path',arg.gatk_path,'-bam',fullfile(arg.out,...
    [pullname(arg.bam),'.realigned.bam']),'-reference',arg.reference,...
    '-out',fullfile(otherwkdir,'post_realignment_calls'),'-variant','both'); 
% mkconfig_genotyper('-gatk_path',arg.gatk_path,'-bam',fullfile(arg.out,...
%     [pullname(arg.bam),'.realigned.bam']),'-reference',arg.reference,...
%     '-out',arg.out,'-variant','INDEL'); 
% mkconfig_Indelgenotyper('-gatk_path',arg.gatk_path,'-bam',...
%     fullfile(arg.out,[pullname(arg.bam),'.realigned.bam']),...
%     '-reference',arg.reference,'-out',arg.out);
% 

%% Sequential Option

% fid = fopen(fullfile(arg.out,'realign.txt'),'w'); 
% 
% for i = 1 : length(header)
%     fprintf(fid,'%s\n',header{i}); 
% end
% 
% fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
%     ' -Xmx5g -Djava.io.tmpdir=',otherwkdir,' -jar ',fullfile(arg.gatk_path,...
%     'GenomeAnalysisTK.jar'),' -T IndelRealigner -targetIntervals ',...
%     arg.intervals,' -R ',arg.reference,' -I ',arg.bam,' -o ',...
%     fullfile(arg.out,[pullname(arg.bam),'.realigned.bam']),...
%     ' -B:indels,VCF ',arg.my_indels,' -B:dbsnp,VCF ',arg.dbsnp]); 
% 
% fprintf(fid,'%s\n\n',['time ',fullfile(arg.samtools_path,'samtools'),...
%     ' sort ',fullfile(arg.out,[pullname(arg.bam),'.realigned.bam']),' ',...
%     fullfile(arg.out,[pullname(arg.bam),'.realigned.sorted'])]); 
% fprintf(fid,'%s\n\n',['time ',fullfile(arg.samtools_path,'samtools'),...
%     ' index ',fullfile(arg.out,[pullname(arg.bam),'.realigned.sorted.bam'])]); 
% 
% fprintf(fid,'%s\n\n',['rm -f ',fullfile(arg.out,[pullname(arg.bam),'.realigned.bam'])]); 
% fprintf(fid,'%s\n\n',['mv ',fullfile(arg.out,[pullname(arg.bam),...
%     '.realigned.sorted.bam']),' ',...
%     fullfile(arg.out,[pullname(arg.bam),'.realigned.bam'])]); 
% fprintf(fid,'%s\n\n',['mv ',fullfile(arg.out,[pullname(arg.bam),...
%     '.realigned.sorted.bam.bai']),' ',...
%     fullfile(arg.out,[pullname(arg.bam),'.realigned.bam.bai'])]);

% fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
%     ' -jar ',fullfile(arg.gatk_path,...
%     'GenomeAnalysisTK.jar'),' -l INFO -R ',arg.reference,' -B:mask,VCF ',...
%     arg.dbsnp,' -I ',fullfile(arg.out,[pullname(arg.bam),'.realigned.bam']),...
%     ' -T CountCovariates -dP illumina -cov ReadGroupCovariate -cov QualityScoreCovariate ',...
%     '-cov CycleCovariate -cov DinucCovariate -recalFile ',...
%     fullfile(otherwkdir,[pullname(arg.bam),'.recal_data.csv'])]); 
% 
% fprintf(fid,'%s\n\n',['time ',fullfile(arg.java_path,'java'),...
%     ' -jar ',fullfile(arg.gatk_path,...
%     'GenomeAnalysisTK.jar'),' -l INFO -R ',arg.reference,' -B:mask,VCF ',...
%     arg.dbsnp,' -I ',fullfile(arg.out,[pullname(arg.bam),'.realigned.bam']),...
%     ' -T TableRecalibration -dP illumina -recalFile ',...
%     fullfile(otherwkdir,[pullname(arg.bam),'.recal_data.csv']),...
%     ' -o ',fullfile(arg.out,[pullname(arg.bam),'.realign_recal.bam'])]);

% mkconfig_genotyper('-gatk_path',arg.gatk_path,'-bam',fullfile(arg.out,...
%     [pullname(arg.bam),'.realign_recal.bam']),'-reference',arg.reference,...
%     '-out',arg.out); 
% mkconfig_Indelgenotyper('-gatk_path',arg.gatk_path,'-bam',...
%     fullfile(arg.out,[pullname(arg.bam),'.realign_recal.bam']),...
%     '-reference',arg.reference,'-out',arg.out);