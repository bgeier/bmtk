function table = gatk_format_table(varargin)
% HISEQ_FORMAT_TABLE    Adjust annotation table columns
%   table = hiseq_format_table(varargin) will read annotated snp output
%   from hiseq_annotate and will give a single column for segmental
%   duplication, snp131, and 1000 genome project. 
%   Inputs: 
%       '-table': table generated by mksh_hiseq_table
%       '-out': The output directory, file will be saved to this location
%       '-type': The type of variant, either 'snp' or 'indel' ['snp']
%   Outputs: 
%       A formated snp annotation file
% 
% see also mksh_hiseq_table
% 
% Author: Brian Geier, BGC 2011

toolName = mfilename ; 
pnames = {'-table','-out','-type'};
dflts = {'',pwd,'snp'}; 

arg = getargs2(pnames,dflts,varargin{:});

print_tool_params2(toolName,1,arg); 


switch arg.type
        
    case 'snp'
        
        fid = fopen(arg.table);
        table.data = textscan(fid,repmat('%s',[1,22]),'Delimiter','\t');
        fclose(fid);

        otherwkdir = mkworkfolder(arg.out,toolName); 

        table.chr = table.data{1};
        table.start = table.data{2} ;
        table.end = table.data{3}; 
        table.ref = table.data{4}; 
        table.obs = table.data{5}; 
        table.allele = table.data{6}; 
        table.quality = table.data{7}; 
        table.dp = table.data{8}; 
        table.qc1 = table.data{9}; 
        table.qc2 = table.data{10}; 
        table.gatk_meta = table.data{11}; 
        table.gatk_meta2 = table.data{12};
        table.gatk_meta3 = table.data{13};
        table.gatk_classify = table.data{14}; 
        table.events = table.data{15} ; 
        table.nearest_gene = table.data{16}; 
        table.db1 = table.data{18};
        table.db1(~strcmp('segdup',table.data{17}))={''}; % segdups are always first
        col1 = table.data{18}; col2 = table.data{20}; col3 = table.data{22}; 
        
        table.db2 = cell(size(table.db1));
        table.db2(strcmp('snp131',table.data{17})) = col1(strcmp('snp131',table.data{17}));
        table.db2(strcmp('snp131',table.data{19})) = col2(strcmp('snp131',table.data{19}));
        table.db2(strcmp('snp131',table.data{21})) = col3(strcmp('snp131',table.data{21}));

        table.db3 = cell(size(table.db1));
        table.db3(strcmp('vcf',table.data{17})) = col1(strcmp('vcf',table.data{17}));
        table.db3(strcmp('vcf',table.data{19})) = col2(strcmp('vcf',table.data{19}));
        table.db3(strcmp('vcf',table.data{21})) = col3(strcmp('vcf',table.data{21}));

        db1_val = table.db1; db2_val = table.db2; db3_val = table.db3;

        table.data = [];

        dbs = {'segdup','snp131','vcf'};
        fid = fopen(fullfile(arg.out,[pullname(arg.table),'_formatted_header.txt']),'w');
        fprintf(fid,repmat('%s\t',[1,17]),'Chromosome','Start','End','Ref',...
            'Obs','Allele','Quality Score','Read Depth',...
            'RMS Mapping Quality','Quality by Depth','gatk-meta','gatk-classification',...
            'Event','Nearest Gene',dbs{1},dbs{2},dbs{3});
        fprintf(fid,'\n'); 
        fclose(fid); 


        num_lines = length(table.chr); num_blocks = 80; 
        start_stops = populate_indices(num_lines,num_blocks); 
        start_stops(1,:) = start_stops(1,:) + 1; 
        start_stops(2,:) = cumsum(start_stops(2,:)); 

        parfor k = 1 : num_blocks
            fid = fopen(fullfile(otherwkdir,[pullname(arg.table),...
                '_formatted_',num2str(k),'.txt']),'w');
            for i = colon(start_stops(1,k),start_stops(2,k))
                fprintf(fid,repmat('%s\t',[1,14]),table.chr{i},table.start{i},...
                    table.end{i},table.ref{i},table.obs{i},table.allele{i},...
                    table.quality{i},table.dp{i},table.qc1{i},table.qc2{i},...
                    table.gatk_meta{i},table.gatk_classify{i},...
                    table.events{i},table.nearest_gene{i});
                fprintf(fid,'%s\t%s\t%s\n',db1_val{i},db2_val{i},db3_val{i}); 
            end
            fclose(fid); 
        end

        system(['cat ',fullfile(otherwkdir,'*'),' > ',fullfile(arg.out,...
            [pullname(arg.table),'_formatted.txt'])]);
        rm(otherwkdir); 

        system(['cat ',...
            fullfile(arg.out,[pullname(arg.table),'_formatted_header.txt']),...
            ' ',fullfile(arg.out,...
            [pullname(arg.table),'_formatted.txt']),' > ',fullfile(arg.out,...
            [pullname(arg.table),'_snp_table.txt'])]); 
        system(['rm ',fullfile(arg.out,[pullname(arg.table),'_formatted_header.txt']),...
            ' ',fullfile(arg.out,...
            [pullname(arg.table),'_formatted.txt'])]);
        
        
        
    case 'indel'

        fid = fopen(arg.table);
        table.data = textscan(fid,repmat('%s',[1,21]),'Delimiter','\t');
        fclose(fid);

        otherwkdir = mkworkfolder(arg.out,toolName); 

        table.chr = table.data{1};
        table.start = table.data{2} ;
        table.end = table.data{3}; 
        table.ref = table.data{4}; 
        table.obs = table.data{5}; 
        table.allele = table.data{6}; 
        table.quality = table.data{7}; 
        table.dp = table.data{8}; 
        table.qc1 = table.data{9}; 
        table.qc2 = table.data{10}; 
        table.gatk_meta = table.data{11}; 
        table.gatk_meta2 = table.data{12};
        table.gatk_meta3 = table.data{13};
        %table.gatk_classify = table.data{14}; 
        table.events = table.data{14} ; 
        table.nearest_gene = table.data{15}; 
        table.db1 = table.data{17};
        table.db1(~strcmp('segdup',table.data{16}))={''}; % segdups are always first
        col1 = table.data{17}; col2 = table.data{19}; col3 = table.data{21}; 
        
        table.db2 = cell(size(table.db1));
        table.db2(strcmp('snp131',table.data{16})) = col1(strcmp('snp131',table.data{16}));
        table.db2(strcmp('snp131',table.data{18})) = col2(strcmp('snp131',table.data{18}));
        table.db2(strcmp('snp131',table.data{20})) = col3(strcmp('snp131',table.data{20}));

        table.db3 = cell(size(table.db1));
        table.db3(strcmp('vcf',table.data{16})) = col1(strcmp('vcf',table.data{16}));
        table.db3(strcmp('vcf',table.data{18})) = col2(strcmp('vcf',table.data{18}));
        table.db3(strcmp('vcf',table.data{20})) = col3(strcmp('vcf',table.data{20}));

        db1_val = table.db1; db2_val = table.db2; db3_val = table.db3;

        table.data = [];

        dbs = {'segdup','snp131','vcf'};
        fid = fopen(fullfile(arg.out,[pullname(arg.table),'_formatted_header.txt']),'w');
        fprintf(fid,repmat('%s\t',[1,16]),'Chromosome','Start','End','Ref',...
            'Obs','Allele','Quality Score','Read Depth',...
            'Reads Supporting INDEL','RMS Mapping Quality','gatk-meta',...
            'Event','Nearest Gene',dbs{1},dbs{2},dbs{3});
        fprintf(fid,'\n'); 
        fclose(fid); 


        num_lines = length(table.chr); num_blocks = 80; 
        start_stops = populate_indices(num_lines,num_blocks); 
        start_stops(1,:) = start_stops(1,:) + 1; 
        start_stops(2,:) = cumsum(start_stops(2,:)); 

        parfor k = 1 : num_blocks
            fid = fopen(fullfile(otherwkdir,[pullname(arg.table),...
                '_formatted_',num2str(k),'.txt']),'w');
            for i = colon(start_stops(1,k),start_stops(2,k))
                fprintf(fid,repmat('%s\t',[1,13]),table.chr{i},table.start{i},...
                    table.end{i},table.ref{i},table.obs{i},table.allele{i},...
                    table.quality{i},table.dp{i},table.qc1{i},table.qc2{i},...
                    table.gatk_meta{i},...
                    table.events{i},table.nearest_gene{i});
                fprintf(fid,'%s\t%s\t%s\n',db1_val{i},db2_val{i},db3_val{i}); 
            end
            fclose(fid); 
        end

        system(['cat ',fullfile(otherwkdir,'*'),' > ',fullfile(arg.out,...
            [pullname(arg.table),'_formatted.txt'])]);
        rm(otherwkdir); 

        system(['cat ',...
            fullfile(arg.out,[pullname(arg.table),'_formatted_header.txt']),...
            ' ',fullfile(arg.out,...
            [pullname(arg.table),'_formatted.txt']),' > ',fullfile(arg.out,...
            [pullname(arg.table),'_indel_table.txt'])]); 
        system(['rm ',fullfile(arg.out,[pullname(arg.table),'_formatted_header.txt']),...
            ' ',fullfile(arg.out,...
            [pullname(arg.table),'_formatted.txt'])]);        
        
    otherwise
        
        print_str('Unsupported type...'); 
        
end

 

end

function start_stops = populate_indices(num_lines,num_blocks)

block_size = floor(num_lines/num_blocks); 
% skip m lines, then read n lines
start_stops = zeros(2,num_blocks); 

reps=[0,1:(num_blocks-1)];
start_stops(1,:) = reps.*(block_size); % skip m lines
start_stops(2,:) = block_size ; % read block of n lines
start_stops(2,end) = num_lines - start_stops(1,end) ; 

end