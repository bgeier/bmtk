function hiseq_annotate(varargin)
% HISEQ_ANNOTATE    Annotate Variants from HiSeq
%   hiseq_annotate(varargin) will annotate the variants, snp's and indel's,
%   using ANNOVAR. This routine is a wrapper to ANNOVAR with some
%   additional analysis. 
%   Inputs: 
%       '-snp': The snp file to be annotated, annovar format
%       '-out': The output directory
%       '-g1000': true=check 1000 genome (default) , false=don't
%       '-segdup': true=check for segmental duplications (default),
%       false=don't
%       '-annovar_dir': The path to the annovar package
%       '-buildver': The genome assembly using in alignment, hg19 is
%       default. All builds are assumed to be UCSC
%       '-missense': true=output file with missense snp's , default is true
%       '-ncRNA': true=output file with ncRNA snp's, default is true
%       '-exonic': true=annotate exonic regions, default is true
%   Output:
% 
% see also hiseq_format_table
% 
% Author: Brian Geier, BGC 2011

tic ; 
toolName = mfilename ; 
pnames = {'-snp','-out','-g1000','-segdup','-sift','-annovar_dir',...
    '-buildver','-missense','-ncRNA','-exonic'};
dflts = {'',pwd,true,true,false,'/Users/bxg018/Documents/annovar',...
    'hg19',true,true,true} ; 

arg = getargs2(pnames,dflts,varargin{:});

print_tool_params2(toolName,1,arg); 
otherwkdir = mkworkfolder(arg.out,toolName); 
fprintf('Saving analysis to %s\n',otherwkdir); 
fid = fopen(fullfile(otherwkdir,sprintf('%s_params.txt',toolName)),'wt'); 
print_tool_params2(toolName,fid,arg); 
fclose(fid); 

mkdir(otherwkdir,'anno_gene');
mkdir(otherwkdir,'anno_filter');
mkdir(otherwkdir,'anno_region');
mkdir(otherwkdir,'events');

cd(arg.annovar_dir); % execute perl scripts from their application dir

% annotate variant input
print_str('Annotating Variants...'); 
[~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
    ' --outfile ',fullfile(otherwkdir,'anno_gene',pullname(arg.snp)),...
    ' ', arg.snp,' humandb/']) ; 
disp(show) 

% Gather new input
system(['cut -f2-3 ',fullfile(otherwkdir,'anno_gene',[pullname(arg.snp),...
    '.exonic_variant_function']),' > ', fullfile(otherwkdir,'events',...
    'tmp1.txt')]) ;
system(['cut -f4- ',fullfile(otherwkdir,'anno_gene',[pullname(arg.snp),...
    '.exonic_variant_function']),' > ', fullfile(otherwkdir,'events',...
    'tmp2.txt')]) ;
system(['paste ',fullfile(otherwkdir,'events','tmp2.txt'),' ',...
    fullfile(otherwkdir,'events','tmp1.txt'),' > ',fullfile(otherwkdir,...
    'events',[pullname(arg.snp),'_exonic.txt'])]) ; 
system(['rm ',fullfile(otherwkdir,'events','tmp2.txt'),' ',...
    fullfile(otherwkdir,'events','tmp1.txt')]) ; 

%% Run Analysis on Exonic regions only
if arg.exonic
    % Check exonic snp variants against snp131 db
    print_str('Searching snp131...'); 
    [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
        ' --outfile ',fullfile(otherwkdir,'anno_filter',pullname(arg.snp)),...
        ' -filter -dbtype snp131 ', fullfile(otherwkdir,...
        'events',[pullname(arg.snp),'_exonic.txt']),' humandb/']) ;
    disp(show)

    if arg.g1000

        print_str('Searching 1000 Genome project...'); 
        [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
            ' --outfile ',fullfile(otherwkdir,'anno_filter',pullname(arg.snp)),...
            ' -filter ', fullfile(otherwkdir,...
            'anno_filter',[pullname(arg.snp),'.',arg.buildver,'_snp131_filtered'])...
            ,' humandb/ -vcfdbfile ALL.2of4intersection.20100804.sites.vcf ',...
            ' -dbtype vcf']) ;
        disp(show)

        system(['grep -w "hom" ',fullfile(otherwkdir,'anno_filter',...
            [pullname(arg.snp),'.',arg.buildver,'_vcf_filtered']),' > ',...
            fullfile(otherwkdir,'events',[pullname(arg.snp),'_hom.txt'])]); 
        system(['grep -w "het" ',fullfile(otherwkdir,'anno_filter',...
            [pullname(arg.snp),'.',arg.buildver,'_vcf_filtered']),' > ',...
            fullfile(otherwkdir,'events',[pullname(arg.snp),'_het.txt'])]); 

        if arg.segdup
            [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
                ' --outfile ',fullfile(otherwkdir,'anno_region',pullname(arg.snp)),...
                ' -dbtype segdup -regionanno ', fullfile(otherwkdir,...
                'anno_filter',[pullname(arg.snp),'.',arg.buildver,'_vcf_filtered'])...
                ,' humandb/ ']);
            disp(show)
        end

        if arg.missense
            system(['grep -w "nonsynonymous" ',fullfile(otherwkdir,'anno_filter',...
                [pullname(arg.snp),'.',arg.buildver,'_vcf_filtered']),' > ',...
                fullfile(otherwkdir,'events',[pullname(arg.snp),...
                '_missense.txt'])]);
        end

    else

        if arg.segdup
            [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
                ' --outfile ',fullfile(otherwkdir,'anno_region',pullname(arg.snp)),...
                ' -dbtype segdup -regionanno ', fullfile(otherwkdir,...
                'anno_filter',[pullname(arg.snp),'.',arg.buildver,'_snp131_filtered'])...
                ,' humandb/ ']);
            disp(show)
        end

        % Separate heterozygous and homozygous snps/indels
        system(['grep -w "hom" ',fullfile(otherwkdir,'anno_filter',...
            [pullname(arg.snp),'.',arg.buildver,'_snp131_filtered']),' > ',...
            fullfile(otherwkdir,'events',[pullname(arg.snp),'_hom.txt'])]); 
        system(['grep -w "het" ',fullfile(otherwkdir,'anno_filter',...
            [pullname(arg.snp),'.',arg.buildver,'_snp131_filtered']),' > ',...
            fullfile(otherwkdir,'events',[pullname(arg.snp),'_het.txt'])]); 

        if arg.missense
            system(['grep -w "nonsynonymous" ',fullfile(otherwkdir,'anno_filter',...
                [pullname(arg.snp),'.',arg.buildver,'_snp131_filtered']),' > ',...
                fullfile(otherwkdir,'events',[pullname(arg.snp),...
                '_missense.txt'])]);
        end

    end
end

%% Run analysis on ncRNA
if arg.ncRNA
    outfile = [pullname(arg.snp),'_ncRNA'] ; 
    system(['grep "ncRNA" ',fullfile(otherwkdir,'anno_gene',[pullname(...
        arg.snp),'.variant_function']),' > ',fullfile(otherwkdir,...
        'events',[pullname(arg.snp),'_ncRNA.txt'])]); 
    
    % rearrange ncRNA file
    
    system(['cut -f1,2 ',fullfile(otherwkdir,'events',[outfile,'.txt']),...
        ' > ',fullfile(otherwkdir,'events','tmp1.txt')]); 
    system(['cut -f3- ',fullfile(otherwkdir,'events',[outfile,'.txt']),...
        ' > ',fullfile(otherwkdir,'events','tmp2.txt')]);
    system(['rm ',fullfile(otherwkdir,'events',[outfile,'.txt'])]); 
    system(['paste ',fullfile(otherwkdir,'events','tmp2.txt'),...
        ' ',fullfile(otherwkdir,'events','tmp1.txt'),' > ',...
        fullfile(otherwkdir,'events',[outfile,'.txt'])]); 
    system(['rm ',fullfile(otherwkdir,'events','tmp2.txt'),...
        ' ',fullfile(otherwkdir,'events','tmp1.txt')]); 
    
    % Check exonic snp variants against snp131 db
    print_str('Searching snp131...'); 
    [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
        ' --outfile ',fullfile(otherwkdir,'anno_filter',outfile),...
        ' -filter -dbtype snp131 ', fullfile(otherwkdir,...
        'events',[pullname(arg.snp),'_ncRNA.txt']),' humandb/']) ;
    
    disp(show) ; 
    
    

    if arg.g1000

        print_str('Searching 1000 Genome project...'); 
        [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
            ' --outfile ',fullfile(otherwkdir,'anno_filter',outfile),...
            ' -filter ', fullfile(otherwkdir,...
            'anno_filter',[outfile,'.',arg.buildver,'_snp131_filtered'])...
            ,' humandb/ -vcfdbfile ALL.2of4intersection.20100804.sites.vcf ',...
            ' -dbtype vcf']) ;
        disp(show)

        system(['grep -w "hom" ',fullfile(otherwkdir,'anno_filter',...
            [outfile,'.',arg.buildver,'_vcf_filtered']),' > ',...
            fullfile(otherwkdir,'events',[outfile,'-hom.txt'])]); 
        system(['grep -w "het" ',fullfile(otherwkdir,'anno_filter',...
            [outfile,'.',arg.buildver,'_vcf_filtered']),' > ',...
            fullfile(otherwkdir,'events',[outfile,'-het.txt'])]); 

        if arg.segdup
            [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
                ' --outfile ',fullfile(otherwkdir,'anno_region',outfile),...
                ' -dbtype segdup -regionanno ', fullfile(otherwkdir,...
                'anno_filter',[outfile,'.',arg.buildver,'_vcf_filtered'])...
                ,' humandb/ ']);
            disp(show)
        end

    else

        if arg.segdup
            [~,show] = system(['./annotate_variation.pl --buildver ',arg.buildver, ...
                ' --outfile ',fullfile(otherwkdir,'anno_region',outfile),...
                ' -dbtype segdup -regionanno ', fullfile(otherwkdir,...
                'anno_filter',[outfile,'.',arg.buildver,'_snp131_filtered'])...
                ,' humandb/ ']);
            disp(show)
        end

        % Separate heterozygous and homozygous snps/indels
        system(['grep -w "hom" ',fullfile(otherwkdir,'anno_filter',...
            [outfile,'.',arg.buildver,'_snp131_filtered']),' > ',...
            fullfile(otherwkdir,'events',[outfile,'-hom.txt'])]); 
        system(['grep -w "het" ',fullfile(otherwkdir,'anno_filter',...
            [outfile,'.',arg.buildver,'_snp131_filtered']),' > ',...
            fullfile(otherwkdir,'events',[outfile,'-het.txt'])]); 

    end
end


% Get GO annotation

% Check filtered snp variants against segmental duplications

% Get 1000 genome frequency per remaining entry

% Get SIFT scores per remaining entry

% Visualize list given 1000 genome and sift data

% Annotate all snp variants using 1000 genome


toc